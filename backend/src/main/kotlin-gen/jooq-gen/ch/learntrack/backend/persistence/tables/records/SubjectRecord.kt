/*
 * This file is generated by jOOQ.
 */
package ch.learntrack.backend.persistence.tables.records


import ch.learntrack.backend.persistence.tables.SubjectTable
import ch.learntrack.backend.persistence.tables.pojos.Subject

import java.time.LocalDateTime
import java.util.UUID

import org.jetbrains.annotations.NotNull
import org.jetbrains.annotations.Nullable
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
public open class SubjectRecord private constructor() : UpdatableRecordImpl<SubjectRecord>(SubjectTable.SUBJECT) {

    public open var id: UUID
        set(value): Unit = set(0, value)
    @NotNull
        get(): UUID = get(0) as UUID

    public open var name: String
        set(value): Unit = set(1, value)
    @NotNull
        get(): String = get(1) as String

    public open var gradeId: UUID
        set(value): Unit = set(2, value)
    @NotNull
        get(): UUID = get(2) as UUID

    public open var created: LocalDateTime?
        set(value): Unit = set(3, value)
    @Nullable
        get(): LocalDateTime? = get(3) as LocalDateTime?

    public open var updated: LocalDateTime?
        set(value): Unit = set(4, value)
    @Nullable
        get(): LocalDateTime? = get(4) as LocalDateTime?

    public open var teacherId: UUID?
        set(value): Unit = set(5, value)
    @Nullable
        get(): UUID? = get(5) as UUID?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    public override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised SubjectRecord
     */
    public constructor(id: UUID, name: String, gradeId: UUID, created: LocalDateTime? = null, updated: LocalDateTime? = null, teacherId: UUID? = null): this() {
        this.id = id
        this.name = name
        this.gradeId = gradeId
        this.created = created
        this.updated = updated
        this.teacherId = teacherId
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised SubjectRecord
     */
    public constructor(value: Subject?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.gradeId = value.gradeId
            this.created = value.created
            this.updated = value.updated
            this.teacherId = value.teacherId
            resetChangedOnNotNull()
        }
    }
}
