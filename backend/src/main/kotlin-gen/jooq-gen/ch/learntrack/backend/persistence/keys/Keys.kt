/*
 * This file is generated by jOOQ.
 */
package ch.learntrack.backend.persistence.keys


import ch.learntrack.backend.persistence.tables.GradeTable
import ch.learntrack.backend.persistence.tables.SchoolTable
import ch.learntrack.backend.persistence.tables.SubjectTable
import ch.learntrack.backend.persistence.tables.UserGradeTable
import ch.learntrack.backend.persistence.tables.UserSchoolTable
import ch.learntrack.backend.persistence.tables.UserTable
import ch.learntrack.backend.persistence.tables.records.GradeRecord
import ch.learntrack.backend.persistence.tables.records.SchoolRecord
import ch.learntrack.backend.persistence.tables.records.SubjectRecord
import ch.learntrack.backend.persistence.tables.records.UserGradeRecord
import ch.learntrack.backend.persistence.tables.records.UserRecord
import ch.learntrack.backend.persistence.tables.records.UserSchoolRecord

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

public val PK_GRADE: UniqueKey<GradeRecord> = Internal.createUniqueKey(GradeTable.GRADE, DSL.name("pk_grade"), arrayOf(GradeTable.GRADE.ID), true)
public val PK_SCHOOL: UniqueKey<SchoolRecord> = Internal.createUniqueKey(SchoolTable.SCHOOL, DSL.name("pk_school"), arrayOf(SchoolTable.SCHOOL.ID), true)
public val PK_SUBJECT: UniqueKey<SubjectRecord> = Internal.createUniqueKey(SubjectTable.SUBJECT, DSL.name("pk_subject"), arrayOf(SubjectTable.SUBJECT.ID), true)
public val PK_USER: UniqueKey<UserRecord> = Internal.createUniqueKey(UserTable.USER, DSL.name("pk_user"), arrayOf(UserTable.USER.ID), true)
public val USER_E_MAIL_ID: UniqueKey<UserRecord> = Internal.createUniqueKey(UserTable.USER, DSL.name("user_e_mail_id"), arrayOf(UserTable.USER.E_MAIL), true)
public val PK_USER_GRADE: UniqueKey<UserGradeRecord> = Internal.createUniqueKey(UserGradeTable.USER_GRADE, DSL.name("pk_user_grade"), arrayOf(UserGradeTable.USER_GRADE.USER_ID, UserGradeTable.USER_GRADE.GRADE_ID), true)
public val PK_USER_SCHOOL: UniqueKey<UserSchoolRecord> = Internal.createUniqueKey(UserSchoolTable.USER_SCHOOL, DSL.name("pk_user_school"), arrayOf(UserSchoolTable.USER_SCHOOL.USER_ID, UserSchoolTable.USER_SCHOOL.SCHOOL_ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

public val T_GRADE__FK_GRADE_SCHOOL: ForeignKey<GradeRecord, SchoolRecord> = Internal.createForeignKey(GradeTable.GRADE, DSL.name("fk_grade_school"), arrayOf(GradeTable.GRADE.SCHOOL_ID), ch.learntrack.backend.persistence.keys.PK_SCHOOL, arrayOf(SchoolTable.SCHOOL.ID), true)
public val T_SUBJECT__FK_SUBJECT_GRADE: ForeignKey<SubjectRecord, GradeRecord> = Internal.createForeignKey(SubjectTable.SUBJECT, DSL.name("fk_subject_grade"), arrayOf(SubjectTable.SUBJECT.GRADE_ID), ch.learntrack.backend.persistence.keys.PK_GRADE, arrayOf(GradeTable.GRADE.ID), true)
public val T_SUBJECT__FK_SUBJECT_USER: ForeignKey<SubjectRecord, UserRecord> = Internal.createForeignKey(SubjectTable.SUBJECT, DSL.name("fk_subject_user"), arrayOf(SubjectTable.SUBJECT.TEACHER_ID), ch.learntrack.backend.persistence.keys.PK_USER, arrayOf(UserTable.USER.ID), true)
public val T_USER_GRADE__FK_USER_GRADE_GRADE: ForeignKey<UserGradeRecord, GradeRecord> = Internal.createForeignKey(UserGradeTable.USER_GRADE, DSL.name("fk_user_grade_grade"), arrayOf(UserGradeTable.USER_GRADE.GRADE_ID), ch.learntrack.backend.persistence.keys.PK_GRADE, arrayOf(GradeTable.GRADE.ID), true)
public val T_USER_GRADE__FK_USER_GRADE_USER: ForeignKey<UserGradeRecord, UserRecord> = Internal.createForeignKey(UserGradeTable.USER_GRADE, DSL.name("fk_user_grade_user"), arrayOf(UserGradeTable.USER_GRADE.USER_ID), ch.learntrack.backend.persistence.keys.PK_USER, arrayOf(UserTable.USER.ID), true)
public val T_USER_SCHOOL__FK_USER_SCHOOL_SCHOOL: ForeignKey<UserSchoolRecord, SchoolRecord> = Internal.createForeignKey(UserSchoolTable.USER_SCHOOL, DSL.name("fk_user_school_school"), arrayOf(UserSchoolTable.USER_SCHOOL.SCHOOL_ID), ch.learntrack.backend.persistence.keys.PK_SCHOOL, arrayOf(SchoolTable.SCHOOL.ID), true)
public val T_USER_SCHOOL__FK_USER_SCHOOL_USER: ForeignKey<UserSchoolRecord, UserRecord> = Internal.createForeignKey(UserSchoolTable.USER_SCHOOL, DSL.name("fk_user_school_user"), arrayOf(UserSchoolTable.USER_SCHOOL.USER_ID), ch.learntrack.backend.persistence.keys.PK_USER, arrayOf(UserTable.USER.ID), true)
